// Generated by CoffeeScript 1.6.3
(function() {
  var PASSWORD, PORT, USERNAME, getAuth, http, httpProxy, inspect, logError, logRequest, net, puts, regularProxy, send401, send500, server, timed_out_until, truncate, url, _ref;

  httpProxy = require('http-proxy');

  net = require('net');

  url = require('url');

  http = require('http');

  _ref = require('util'), puts = _ref.puts, inspect = _ref.inspect;

  USERNAME = process.env.PROXY_USERNAME || '';

  PASSWORD = process.env.PROXY_PASSWORD || 'password';

  PORT = process.env.PORT != null ? parseInt(process.env.PORT) : 3000;

  timed_out_until = 0;

  truncate = function(str) {
    var maxLen;
    maxLen = 64;
    if (str.length > maxLen) {
      return str.substr(0, maxLen) + '...';
    } else {
      return str;
    }
  };

  logRequest = function(req) {
    return console.log("" + (Date()) + "\t " + req.method + " " + (truncate(req.url)));
  };

  logError = function(err) {
    return console.warn("*** " + (Date()) + "\t " + err);
  };

  process.on('uncaughtException', logError);

  regularProxy = new httpProxy.RoutingProxy();

  send500 = function(req, res) {
    res.statusCode = 500;
    res.setHeader('proxy-alive', 'false');
    res.setHeader('Content-Type', 'text/plain');
    res.write("Error\n");
    return res.end();
  };

  send401 = function(req, res) {
    res.statusCode = 401;
    res.setHeader('Content-Type', 'text/plain');
    res.write("Unauthorized\n");
    return res.end();
  };

  getAuth = function(authHeader) {
    var auth, error, parts, token;
    try {
      token = authHeader.split(/\s+/).pop();
      auth = new Buffer(token, 'base64').toString();
      parts = auth.split(/:/);
      return {
        username: parts[0],
        password: parts[1]
      };
    } catch (_error) {
      error = _error;
      return {
        username: null,
        password: null
      };
    }
  };

  server = http.createServer(function(req, res) {
    var auth, uri;
    logRequest(req);
    uri = url.parse(req.url);
    if (timed_out_until > Date.now()) {
      send500(req, res);
      return;
    }
    if (uri.path.match('is_alive')) {
      console.log("* Last timeout was " + timed_out_until);
      res.setHeader('proxy-alive', 'true');
      res.setHeader('Content-Type', 'text/plain');
      res.write("OK\n");
      res.end();
      return;
    }
    auth = getAuth(req.headers['proxy-authorization'] || '');
    if (!(auth.username === USERNAME && auth.password === PASSWORD)) {
      console.log("Unauthorized request to " + uri.hostname);
      send401(req, res);
      return;
    }
    res.oldWrite = res.write;
    res.write = function(data) {
      if (data.toString().match(/This IP has been automatically blocked/)) {
        logError('ERROR! data: \t' + data.toString());
        timed_out_until = Date.now() + 1000 * 60 * 5;
        send500(req, res);
      } else {
        return res.oldWrite(data);
      }
    };
    return regularProxy.proxyRequest(req, res, {
      host: uri.hostname,
      port: uri.port || 80
    });
  });

  server.on('upgrade', function(req, socket, head) {
    var conn, parts;
    logRequest(req);
    parts = req.url.split(':', 2);
    return conn = net.connect(parts[1], parts[2], function() {
      socket.write("HTTP/1.1 200 OK\r\n\r\n");
      socket.pipe(conn);
      return conn.pipe(socket);
    });
  });

  server.listen(PORT);

  console.log("Starting proxy on port " + PORT);

}).call(this);
