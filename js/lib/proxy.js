// Generated by CoffeeScript 1.6.3
(function() {
  var http, httpProxy, logError, logRequest, net, regularProxy, server, truncate, url;

  httpProxy = require('http-proxy');

  net = require('net');

  url = require('url');

  http = require('http');

  truncate = function(str) {
    var maxLen;
    maxLen = 64;
    if (str.length > maxLen) {
      return str.substr(0, maxLen) + '...';
    } else {
      return str;
    }
  };

  logRequest = function(req) {
    var header, _i, _len, _ref, _results;
    console.log("" + (Date()) + "\t " + req.method + " " + (truncate(req.url)));
    _ref = req.headers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      header = _ref[_i];
      _results.push(console.log("* " + header + ": " + (truncate(req.headers[header]))));
    }
    return _results;
  };

  logError = function(err) {
    return console.warn("*** " + (Date()) + "\t " + err);
  };

  process.on('uncaughtException', logError);

  regularProxy = new httpProxy.RoutingProxy();

  server = http.createServer(function(req, res) {
    var uri;
    uri = url.parse(req.url);
    if (uri.path.match('is_alive')) {
      logRequest(req);
      res.statusCode = 200;
      res.setHeader('proxy-alive', 'true');
      res.setHeader('Content-Type', 'text/plain');
      res.write("OK\n");
      res.end();
      return;
    }
    logRequest(req);
    res.oldWrite = res.write;
    res.write = function(data) {
      if (data.toString().match(/This IP has been automatically blocked/ || Math.random() > 0.5)) {
        logError('ERROR! data: \t' + data.toString());
      }
      return res.oldWrite(data);
    };
    return regularProxy.proxyRequest(req, res, {
      host: uri.hostname,
      port: uri.port || 80
    });
  });

  server.on('upgrade', function(req, socket, head) {
    var conn, parts;
    logRequest(req);
    parts = req.url.split(':', 2);
    return conn = net.connect(parts[1], parts[2], function() {
      socket.write("HTTP/1.1 200 OK\r\n\r\n");
      socket.pipe(conn);
      return conn.pipe(socket);
    });
  });

  server.listen(3000);

  console.log("Starting proxy on port 3000");

}).call(this);
